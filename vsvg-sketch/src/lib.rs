pub mod context;
pub mod prelude;
mod runner;
pub mod sketch;
pub mod widgets;

pub type Result = anyhow::Result<()>;

pub use sketch::Sketch;

pub use runner::Runner;

/// This is the trait that your sketch app must implement.
pub trait App {
    fn update(&mut self, sketch: &mut Sketch, ctx: &mut context::Context) -> anyhow::Result<()>;

    //TODO:
    // - extra ui?
    // - extra CLI?
}

pub trait SketchUI {
    /// Draw the UI for the sketch, return whether the sketch should be updated.
    ///
    /// This function is generated by the [`Sketch`] derive macro.
    fn ui(&mut self, ui: &mut egui::Ui) -> bool;
}

pub trait SketchApp: App + SketchUI {
    /// The name of the sketch, used the window title, the default output file name, and persistent
    /// settings.
    fn name(&self) -> String;
}
